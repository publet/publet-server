(logging/init :file "/var/log/riemann.log")

(let [host "0.0.0.0"]
  (tcp-server :host host)
  (udp-server :host host))

(def graph (graphite {:host "localhost"}))

(defn slack-formatter [events]
  {:text (str "Host: " (:host events)
              " State: " (:state events)
              " Metric: " (:metric events)
              " Service:  " (:service events))})

(defn add-environ-name
  "Add the environment name to the hostname, based on the presence of a tag."
  [{:keys [tags host] :as event}]
  (let [tags (set tags)]
    (cond
      (tags "production") (update-in event [:host] str ".production")
      (tags "staging")    (update-in event [:host] str ".staging")
      (tags "beta")       (update-in event [:host] str ".beta")
      :else               event)))

(defn add-environ-name-combined
  [{:keys [tags host] :as event}]
  (let [tags (set tags)]
    (assoc event :host (cond
                         (tags "production") "all-hosts.production"
                         (tags "staging")    "all-hosts.staging"
                         (tags "beta")       "all-hosts.beta"
                         :else               "all-hosts"))))

(let [
      ; Streams that take events, transform them into a specific type of metric,
      ; and send them along to graphite.

      occurrenceify #(adjust [:service str " occurences"]
                             (with {:metric 1.0}
                                   graph))

      meterify #(adjust [:service str " rate-per-second"]
                        (default {:metric 1.0}
                                 (fill-in-last 5 {:metric 0.0}
                                               (rate 5
                                                     graph))))


      histogramify #(adjust [:service str " value"]
                            (percentiles 5 [0.5 0.75 0.95 0.99 1.0]
                                         graph))


      ; Streams that take events, look at their tags, and send them along to the
      ; appropriate metricizing stream(s).

      occurrences #(where (tagged "occurrence")
                          (occurrenceify))

      meters #(where (tagged "meter")
                     (meterify))

      histograms #(where (tagged "histogram")
                         (histogramify))

      timers #(where (tagged "timer")
                     (histogramify))

      ; Gauges are special -- they're super simple.

      gauges #(where (tagged "gauge")
                     graph)

      ; Shortcut to send a stream along to all metrics.

      metrics #(default {}
                        (occurrences)
                        (meters)
                        (histograms)
                        (timers)
                        (gauges))

      credentials {:account "publet" :token "oLpYq07ybAokzbZAS63UwQDu"}
      slacker (slack credentials {:username "Riemann bot"
                                  :channel "#robots"
                                  :formatter slack-formatter})]
  (streams

    ;; Notify slack if disk is getting full
    (where (and (service "gauges.disk.used-percent")
                (<= 90 metric))
      (with :state "critical"
        (throttle 1 3600
                  slacker)))

    (with {:host "riemann" :service "raw-events-processed" :metric 1.0}
          (fill-in-last 5 {:metric 0.0}
                        (rate 5 graph)))

    (adjust add-environ-name
            (by [:host :service]
                (metrics)))

    (adjust add-environ-name-combined
            (by [:host :service]
                (metrics)))))
